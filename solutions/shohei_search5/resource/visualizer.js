// Generated by Haxe 4.0.0-rc.2+78b5593f5
(function ($hx_exports) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	Main.currentId = 0;
	Main.visualizers = [];
	window.addEventListener("load",Main.onEnterFrame);
	Main.time = new Date().getTime();
	window.setInterval(Main.onEnterFrame,null,16.666666666666668);
};
Main.onLoad = function() {
	Main.readVisualizer();
};
Main.onEnterFrame = function() {
	Main.readVisualizer();
	var nextTime = new Date().getTime();
	var _g = 0;
	var _g1 = Main.visualizers;
	while(_g < _g1.length) {
		var visualizer = _g1[_g];
		++_g;
		visualizer.update(nextTime - Main.time);
	}
	Main.time = nextTime;
};
Main.readVisualizer = function() {
	var elements = window.document.getElementsByClassName("visual-log");
	var _g = 0;
	while(_g < elements.length) {
		var element = elements[_g];
		++_g;
		var elementId = element.getAttribute("visual-id");
		if(elementId == null) {
			var elementId1 = Main;
			elementId = "" + (elementId1.currentId += 1);
			element.setAttribute("visual-id",elementId);
			Main.visualizers.push(new visualizer_Visualizer(element));
		}
	}
};
Math.__name__ = true;
var Perf = $hx_exports["Perf"] = function(pos,offset) {
	if(offset == null) {
		offset = 0;
	}
	if(pos == null) {
		pos = "TR";
	}
	this._perfObj = window.performance;
	if(Reflect.field(this._perfObj,"memory") != null) {
		this._memoryObj = Reflect.field(this._perfObj,"memory");
	}
	this._memCheck = this._perfObj != null && this._memoryObj != null && this._memoryObj.totalJSHeapSize > 0;
	this._pos = pos;
	this._offset = offset;
	this.currentFps = 60;
	this.currentMs = 0;
	this.currentMem = "0";
	this.lowFps = 60;
	this.avgFps = 60;
	this._measureCount = 0;
	this._totalFps = 0;
	this._time = 0;
	this._ticks = 0;
	this._fpsMin = 60;
	this._fpsMax = 60;
	this._startTime = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
	this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	this._createFpsDom();
	this._createMsDom();
	if(this._memCheck) {
		this._createMemoryDom();
	}
	if(window.requestAnimationFrame != null) {
		this.RAF = ($_=window,$bind($_,$_.requestAnimationFrame));
	} else if(window.mozRequestAnimationFrame != null) {
		this.RAF = window.mozRequestAnimationFrame;
	} else if(window.webkitRequestAnimationFrame != null) {
		this.RAF = window.webkitRequestAnimationFrame;
	} else if(window.msRequestAnimationFrame != null) {
		this.RAF = window.msRequestAnimationFrame;
	}
	if(window.cancelAnimationFrame != null) {
		this.CAF = ($_=window,$bind($_,$_.cancelAnimationFrame));
	} else if(window.mozCancelAnimationFrame != null) {
		this.CAF = window.mozCancelAnimationFrame;
	} else if(window.webkitCancelAnimationFrame != null) {
		this.CAF = window.webkitCancelAnimationFrame;
	} else if(window.msCancelAnimationFrame != null) {
		this.CAF = window.msCancelAnimationFrame;
	}
	if(this.RAF != null) {
		this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
	}
};
Perf.__name__ = true;
Perf.prototype = {
	_init: function() {
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_now: function() {
		if(this._perfObj != null && this._perfObj.now != null) {
			return this._perfObj.now();
		} else {
			return new Date().getTime();
		}
	}
	,_tick: function(val) {
		var time = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
		this._ticks++;
		if(this._raf != null && time > this._prevTime + Perf.MEASUREMENT_INTERVAL) {
			this.currentMs = Math.round(time - this._startTime);
			this.ms.innerHTML = "MS: " + this.currentMs;
			this.currentFps = Math.round(this._ticks * 1000 / (time - this._prevTime));
			if(this.currentFps > 0 && val > Perf.DELAY_TIME) {
				this._measureCount++;
				this._totalFps += this.currentFps;
				this.lowFps = this._fpsMin = Math.min(this._fpsMin,this.currentFps);
				this._fpsMax = Math.max(this._fpsMax,this.currentFps);
				this.avgFps = Math.round(this._totalFps / this._measureCount);
			}
			this.fps.innerHTML = "FPS: " + this.currentFps + " (" + this._fpsMin + "-" + this._fpsMax + ")";
			if(this.currentFps >= 30) {
				this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
			} else if(this.currentFps >= 15) {
				this.fps.style.backgroundColor = Perf.FPS_WARN_BG_CLR;
			} else {
				this.fps.style.backgroundColor = Perf.FPS_PROB_BG_CLR;
			}
			this._prevTime = time;
			this._ticks = 0;
			if(this._memCheck) {
				this.currentMem = this._getFormattedSize(this._memoryObj.usedJSHeapSize,2);
				this.memory.innerHTML = "MEM: " + this.currentMem;
			}
		}
		this._startTime = time;
		if(this._raf != null) {
			this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
		}
	}
	,_createDiv: function(id,top) {
		if(top == null) {
			top = 0;
		}
		var div = window.document.createElement("div");
		div.id = id;
		div.className = id;
		div.style.position = "absolute";
		switch(this._pos) {
		case "BL":
			div.style.left = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "BR":
			div.style.right = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "TL":
			div.style.left = this._offset + "px";
			div.style.top = top + "px";
			break;
		case "TR":
			div.style.right = this._offset + "px";
			div.style.top = top + "px";
			break;
		}
		div.style.width = "80px";
		div.style.height = "12px";
		div.style.lineHeight = "12px";
		div.style.padding = "2px";
		div.style.fontFamily = Perf.FONT_FAMILY;
		div.style.fontSize = "9px";
		div.style.fontWeight = "bold";
		div.style.textAlign = "center";
		window.document.body.appendChild(div);
		return div;
	}
	,_createFpsDom: function() {
		this.fps = this._createDiv("fps");
		this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
		this.fps.style.zIndex = "995";
		this.fps.style.color = Perf.FPS_TXT_CLR;
		this.fps.innerHTML = "FPS: 0";
	}
	,_createMsDom: function() {
		this.ms = this._createDiv("ms",16);
		this.ms.style.backgroundColor = Perf.MS_BG_CLR;
		this.ms.style.zIndex = "996";
		this.ms.style.color = Perf.MS_TXT_CLR;
		this.ms.innerHTML = "MS: 0";
	}
	,_createMemoryDom: function() {
		this.memory = this._createDiv("memory",32);
		this.memory.style.backgroundColor = Perf.MEM_BG_CLR;
		this.memory.style.color = Perf.MEM_TXT_CLR;
		this.memory.style.zIndex = "997";
		this.memory.innerHTML = "MEM: 0";
	}
	,_getFormattedSize: function(bytes,frac) {
		if(frac == null) {
			frac = 0;
		}
		var sizes = ["Bytes","KB","MB","GB","TB"];
		if(bytes == 0) {
			return "0";
		}
		var precision = Math.pow(10,frac);
		var i = Math.floor(Math.log(bytes) / Math.log(1024));
		return Math.round(bytes * precision / Math.pow(1024,i)) / precision + " " + sizes[i];
	}
	,addInfo: function(val) {
		this.info = this._createDiv("info",this._memCheck ? 48 : 32);
		this.info.style.backgroundColor = Perf.INFO_BG_CLR;
		this.info.style.color = Perf.INFO_TXT_CLR;
		this.info.style.zIndex = "998";
		this.info.innerHTML = val;
	}
	,clearInfo: function() {
		if(this.info != null) {
			window.document.body.removeChild(this.info);
			this.info = null;
		}
	}
	,destroy: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
		this._perfObj = null;
		this._memoryObj = null;
		if(this.fps != null) {
			window.document.body.removeChild(this.fps);
			this.fps = null;
		}
		if(this.ms != null) {
			window.document.body.removeChild(this.ms);
			this.ms = null;
		}
		if(this.memory != null) {
			window.document.body.removeChild(this.memory);
			this.memory = null;
		}
		this.clearInfo();
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_cancelRAF: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
	}
};
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var c = _g_s.charCodeAt(_g_offset++);
		if(c >= 55296 && c < 56319) {
			c = c - 55232 << 10 | _g_s.charCodeAt(_g_offset++) & 1023;
		}
		var code = c;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
var _$UInt_UInt_$Impl_$ = {};
_$UInt_UInt_$Impl_$.__name__ = true;
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt32());
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readUInt24: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		if(this.bigEndian) {
			return ch3 | ch2 << 8 | ch1 << 16;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe_io_BytesInput.__name__ = true;
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = l;
			while(_g3 < _g11) {
				var i1 = _g3++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var log_LogEntry = function(frame,clearIndex,commandPosition,byteSize) {
	this.frame = frame;
	this.clearIndex = clearIndex;
	this.commandPosition = commandPosition;
	this.byteSize = byteSize;
};
log_LogEntry.__name__ = true;
var log_LogReaderBase = function(reader) {
	this.reader = reader;
	reader.input.set_bigEndian(false);
	this.position = 0;
};
log_LogReaderBase.__name__ = true;
log_LogReaderBase.compareInt = function(a,b) {
	if(a < b) {
		return -1;
	} else if(a > b) {
		return 1;
	}
	return 0;
};
log_LogReaderBase.prototype = {
	get_byteSize: function() {
		this.prepare();
		return this._byteSize;
	}
	,get_entrySize: function() {
		this.prepare();
		return this._entrySize;
	}
	,get_frameSize: function() {
		this.prepare();
		return this._frameSize;
	}
	,readInt32: function() {
		var value = this.reader.input.readInt32();
		this.position += 4;
		return value;
	}
	,readFloat: function() {
		var value = this.reader.input.readFloat();
		this.position += 4;
		return value;
	}
	,readAlpha: function() {
		return this.readUInt16() / 65535;
	}
	,readRotation: function(points) {
		var max = Math.PI * 2 / _$UInt_UInt_$Impl_$.toFloat(points);
		return this.readUInt16() / 65535 * max;
	}
	,readUInt24: function() {
		var value = this.reader.input.readUInt24();
		this.position += 3;
		return value;
	}
	,readUInt16: function() {
		var value = this.reader.input.readUInt16();
		this.position += 2;
		return value;
	}
	,readByte: function() {
		var value = this.reader.input.readByte();
		this.position += 1;
		return value;
	}
	,readShortString: function() {
		var size = this.readUInt16();
		var value = this.reader.input.read(size);
		this.position = this.position + size;
		return value.toString();
	}
	,readLongString: function() {
		var size = this.readUInt24();
		var value = this.reader.input.read(size);
		this.position = this.position + size;
		return value.toString();
	}
	,readArrayString: function() {
		var size = this.readUInt16();
		var _g = [];
		var _g1 = 0;
		var _g2 = size;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.readShortString());
		}
		return _g;
	}
	,readArrayFloat: function() {
		var size = this.readUInt16();
		var _g = [];
		var _g1 = 0;
		var _g2 = size;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.readFloat());
		}
		return _g;
	}
	,readBool: function() {
		var _g = this.readByte();
		switch(_g) {
		case 0:
			return false;
		case 1:
			return true;
		default:
			var value = _g;
			throw new js__$Boot_HaxeError("unknown bool: " + value);
		}
	}
	,skip: function(data) {
		this.goto(this.position + data);
	}
	,goto: function(position) {
		this.reader.seek(position - this.position);
		this.position = position;
	}
	,prepare: function() {
		if(this.layers == null) {
			this._entrySize = 0;
			var frame = 0;
			var layerMap_h = { };
			var layerIndexes = [];
			this.goto(0);
			while(true) {
				var layerNumber;
				var clear;
				var commandPosition;
				var byteSize;
				try {
					frame += this.readInt32();
					layerNumber = this.readInt32();
					var flags = this.readByte();
					clear = flags % 2 == 1;
					byteSize = this.readInt32();
					commandPosition = this.position;
					this.skip(byteSize);
				} catch( e ) {
					var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
					if(((e1) instanceof haxe_io_Eof)) {
						var e2 = e1;
						break;
					} else {
						throw e;
					}
				}
				var layer;
				if(layerMap_h.hasOwnProperty(layerNumber)) {
					layer = layerMap_h[layerNumber];
				} else {
					layerIndexes.push(layerNumber);
					var v = new log_LogReaderLayer(layerNumber);
					layerMap_h[layerNumber] = v;
					layer = v;
				}
				if(clear) {
					layer.clearIndex = layer.entries.length;
				}
				layer.entries.push(new log_LogEntry(frame,layer.clearIndex,commandPosition,byteSize));
				this._entrySize += 1;
			}
			layerIndexes.sort(log_LogReaderBase.compareInt);
			var _g = [];
			var _g1 = 0;
			while(_g1 < layerIndexes.length) {
				var i = layerIndexes[_g1];
				++_g1;
				_g.push(layerMap_h[i]);
			}
			this.layers = _g;
			this._byteSize = this.position;
			this._frameSize = frame + 1;
		}
	}
};
var log_LogReaderLayer = function(layerDepth) {
	this.layerDepth = layerDepth;
	this.clearIndex = 0;
	this.entries = [];
};
log_LogReaderLayer.__name__ = true;
log_LogReaderLayer.prototype = {
	findEntry: function(frame) {
		var min = 0;
		var max = this.entries.length;
		while(true) {
			var next = ((max - min) / 2 | 0) + min;
			var dv = this.entries[next].frame;
			if(dv <= frame) {
				min = next + 1;
			} else {
				max = next;
			}
			if(min == max) {
				break;
			}
		}
		return min;
	}
};
var pixi_plugins_app_Application = function() {
	this._animationFrameId = null;
	this.pixelRatio = 1;
	this.autoResize = true;
	this.transparent = false;
	this.antialias = false;
	this.forceFXAA = false;
	this.roundPixels = false;
	this.legacy = false;
	this.clearBeforeRender = true;
	this.preserveDrawingBuffer = false;
	this.backgroundColor = 16777215;
	this.width = window.innerWidth;
	this.height = window.innerHeight;
	this.position = "static";
};
pixi_plugins_app_Application.__name__ = true;
pixi_plugins_app_Application.prototype = {
	_setDefaultValues: function() {
		this._animationFrameId = null;
		this.pixelRatio = 1;
		this.autoResize = true;
		this.transparent = false;
		this.antialias = false;
		this.forceFXAA = false;
		this.roundPixels = false;
		this.legacy = false;
		this.clearBeforeRender = true;
		this.preserveDrawingBuffer = false;
		this.backgroundColor = 16777215;
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.position = "static";
	}
	,start: function(rendererType,parentDom,canvasElement) {
		if(rendererType == null) {
			rendererType = "auto";
		}
		if(canvasElement == null) {
			this.canvas = window.document.createElement("canvas");
			this.canvas.style.width = this.width + "px";
			this.canvas.style.height = this.height + "px";
			this.canvas.style.position = this.position;
		} else {
			this.canvas = canvasElement;
		}
		if(this.autoResize) {
			window.onresize = $bind(this,this._onWindowResize);
		}
		var renderingOptions = { };
		renderingOptions.width = this.width | 0;
		renderingOptions.height = this.height | 0;
		renderingOptions.view = this.canvas;
		renderingOptions.backgroundColor = this.backgroundColor;
		renderingOptions.resolution = this.pixelRatio;
		renderingOptions.antialias = this.antialias;
		renderingOptions.forceFXAA = this.forceFXAA;
		renderingOptions.autoResize = this.autoResize;
		renderingOptions.transparent = this.transparent;
		renderingOptions.clearBeforeRender = this.clearBeforeRender;
		renderingOptions.preserveDrawingBuffer = this.preserveDrawingBuffer;
		renderingOptions.roundPixels = this.roundPixels;
		renderingOptions.legacy = this.legacy;
		if(rendererType == null) {
			this.app = new PIXI.Application(renderingOptions);
		} else if(rendererType == "canvas") {
			renderingOptions.forceCanvas = true;
			this.app = new PIXI.Application(renderingOptions);
		} else {
			this.app = new PIXI.Application(renderingOptions);
		}
		this.stage = this.app.stage;
		this.renderer = this.app.renderer;
		if(parentDom == null) {
			window.document.body.appendChild(this.app.view);
		} else {
			parentDom.appendChild(this.app.view);
		}
		this.app.ticker.add($bind(this,this._onRequestAnimationFrame));
	}
	,pauseRendering: function() {
		this.app.stop();
	}
	,resumeRendering: function() {
		this.app.start();
	}
	,_onWindowResize: function(event) {
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.app.renderer.resize(this.width,this.height);
		this.canvas.style.width = this.width + "px";
		this.canvas.style.height = this.height + "px";
		if(this.onResize != null) {
			this.onResize();
		}
	}
	,_onRequestAnimationFrame: function() {
		if(this.onUpdate != null) {
			this.onUpdate(this.app.ticker.deltaTime);
		}
	}
	,addStats: function() {
		if(window.Perf != null) {
			var rendererType = this.app.renderer.type;
			var renderer;
			switch(rendererType) {
			case 1:
				renderer = "WEBGL";
				break;
			case 2:
				renderer = "CANVAS";
				break;
			default:
				renderer = "UNKNOWN";
			}
			new Perf().addInfo(renderer + " - " + this.pixelRatio);
		}
	}
};
var seekable_SeekableBytesReader = function(input) {
	this.input = input;
};
seekable_SeekableBytesReader.__name__ = true;
seekable_SeekableBytesReader.prototype = {
	seek: function(offset) {
		var _g = this.input;
		_g.set_position(_g.pos + offset);
	}
	,close: function() {
	}
};
var trlog_TrlogConfig = function(fps) {
	if(fps == null) {
		fps = 60;
	}
	this.fps = fps;
};
trlog_TrlogConfig.__name__ = true;
var trlog_TrlogReader = function(reader) {
	log_LogReaderBase.call(this,reader);
	var error = "";
	var name = reader.input.readInt32();
	if(name != 1869378164) {
		throw new js__$Boot_HaxeError("visual log identifer must be " + Std.string(_$UInt_UInt_$Impl_$.toFloat(1869378164)) + " but " + Std.string(_$UInt_UInt_$Impl_$.toFloat(name)));
	}
	var version = reader.input.readInt32();
	if(version != 1) {
		throw new js__$Boot_HaxeError("unsupported version: " + Std.string(_$UInt_UInt_$Impl_$.toFloat(name)));
	}
	var headerSize = reader.input.readInt32();
	if(headerSize < 16) {
		throw new js__$Boot_HaxeError("unsupported header size: " + headerSize);
	}
	this.config = new trlog_TrlogConfig(reader.input.readFloat());
	this._frameSize = reader.input.readInt32();
	this._entrySize = reader.input.readInt32();
	this._byteSize = reader.input.readInt32();
	reader.seek(headerSize - 16);
};
trlog_TrlogReader.__name__ = true;
trlog_TrlogReader.__super__ = log_LogReaderBase;
trlog_TrlogReader.prototype = $extend(log_LogReaderBase.prototype,{
	getText: function(frame) {
		var stringBuf_b = "";
		this.prepare();
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var layer = _g1[_g];
			++_g;
			var index = layer.findEntry(frame);
			if(index <= 0) {
				continue;
			}
			var clearIndex = layer.entries[index - 1].clearIndex;
			var _g2 = clearIndex;
			var _g11 = index;
			while(_g2 < _g11) {
				var i = _g2++;
				var entry = layer.entries[i];
				this.goto(entry.commandPosition);
				var target = this.position + entry.byteSize;
				while(this.position < target) {
					var _g3 = this.readByte();
					if(_g3 == 0) {
						var string = this.readLongString();
						stringBuf_b += string == null ? "null" : "" + string;
					} else {
						var command = _g3;
						throw new js__$Boot_HaxeError("unknow command: " + command);
					}
				}
			}
		}
		return stringBuf_b;
	}
});
var util_ElementUtil = function() { };
util_ElementUtil.__name__ = true;
util_ElementUtil.element = function(name,attributes,children) {
	var element = window.document.createElement(name);
	var _g = 0;
	var _g1 = Reflect.fields(attributes);
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		var value = attributes[key];
		element.setAttribute(key,value);
	}
	if(children != null) {
		var _g2 = 0;
		while(_g2 < children.length) {
			var child = children[_g2];
			++_g2;
			element.appendChild(child);
		}
	}
	return element;
};
util_ElementUtil.div = function(attributes,children) {
	return util_ElementUtil.element("div",attributes,children);
};
util_ElementUtil.span = function(attributes,text) {
	var element = window.document.createElement("span");
	var _g = 0;
	var _g1 = Reflect.fields(attributes);
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		var value = attributes[key];
		element.setAttribute(key,value);
	}
	element.innerHTML = StringTools.htmlEscape(text);
	return element;
};
util_ElementUtil.enable = function(element,enabled) {
	if(element.hasAttribute("disabled") == enabled) {
		if(enabled) {
			element.removeAttribute("disabled");
		} else {
			element.setAttribute("disabled","disabled");
		}
	}
};
util_ElementUtil.setText = function(element,text) {
	element.innerHTML = StringTools.htmlEscape(text);
};
var vilog__$BlendMode_BlendMode_$Impl_$ = {};
vilog__$BlendMode_BlendMode_$Impl_$.__name__ = true;
vilog__$BlendMode_BlendMode_$Impl_$._new = function(value) {
	if(value < 0 || 16 < value) {
		throw new js__$Boot_HaxeError("unknown blend mode: " + value);
	}
	var this1 = value;
	return this1;
};
var vilog__$TextureRequired_TextureRequired_$Impl_$ = {};
vilog__$TextureRequired_TextureRequired_$Impl_$.__name__ = true;
vilog__$TextureRequired_TextureRequired_$Impl_$._new = function(value) {
	if(value != 0 && value != 1 && value != 2) {
		throw new js__$Boot_HaxeError("unsuppoted TextureRequired: " + value);
	}
	var this1 = value;
	return this1;
};
var vilog__$VilogCommandKind_VilogCommandKind_$Impl_$ = {};
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.__name__ = true;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$._new = function(byte) {
	var this1 = byte;
	return this1;
};
var vilog_VilogConfig = function(width,height,fps,background) {
	if(background == null) {
		background = -1;
	}
	if(fps == null) {
		fps = 2;
	}
	this.width = width;
	this.height = height;
	this.fps = fps;
	this.background = background;
};
vilog_VilogConfig.__name__ = true;
var vilog_VilogReader = function(reader) {
	log_LogReaderBase.call(this,reader);
	var name = reader.input.readInt32();
	if(name != 1869375862) {
		throw new js__$Boot_HaxeError("visual log identifer must be " + Std.string(_$UInt_UInt_$Impl_$.toFloat(1869375862)) + " but " + Std.string(_$UInt_UInt_$Impl_$.toFloat(name)));
	}
	var version = reader.input.readInt32();
	if(version != 1) {
		throw new js__$Boot_HaxeError("unsupported version: " + Std.string(_$UInt_UInt_$Impl_$.toFloat(name)));
	}
	var headerSize = reader.input.readInt32();
	if(headerSize > 29) {
		throw new js__$Boot_HaxeError("unsupported header size: " + headerSize);
	}
	this.config = new vilog_VilogConfig(reader.input.readInt32(),reader.input.readInt32(),reader.input.readFloat(),reader.input.readInt32());
	this._textureRequired = vilog__$TextureRequired_TextureRequired_$Impl_$._new(reader.input.readByte());
	this._frameSize = reader.input.readInt32();
	this._entrySize = reader.input.readInt32();
	this._byteSize = reader.input.readInt32();
	reader.seek(headerSize - 29);
	this.position = 0;
};
vilog_VilogReader.__name__ = true;
vilog_VilogReader.__super__ = log_LogReaderBase;
vilog_VilogReader.prototype = $extend(log_LogReaderBase.prototype,{
	draw: function(previousFrame,frame,drawTarget) {
		this.prepare();
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var layer = _g1[_g];
			++_g;
			var index = layer.findEntry(frame);
			var drawLayer = drawTarget.getLayer(layer.layerDepth);
			if(index <= 0) {
				drawLayer.clear();
				continue;
			}
			var clearIndex = layer.entries[index - 1].clearIndex;
			var previousIndex = layer.findEntry(previousFrame);
			var startIndex;
			if(clearIndex < previousIndex && previousIndex <= index) {
				startIndex = previousIndex;
			} else {
				drawLayer.clear();
				startIndex = clearIndex;
			}
			var _g2 = startIndex;
			var _g11 = index;
			while(_g2 < _g11) {
				var i = _g2++;
				var entry = layer.entries[i];
				this.proceedCommands(drawLayer,entry.commandPosition,entry.byteSize);
			}
		}
	}
	,proceedCommands: function(drawLayer,begin,length) {
		this.goto(begin);
		var end = begin + length;
		while(_$UInt_UInt_$Impl_$.gt(end,this.position)) {
			var _g = vilog__$VilogCommandKind_VilogCommandKind_$Impl_$._new(this.readByte());
			switch(_g) {
			case 0:
				drawLayer.lineTo(this.readFloat(),this.readFloat());
				break;
			case 1:
				drawLayer.moveTo(this.readFloat(),this.readFloat());
				break;
			case 2:
				drawLayer.quaraticCurveTo(this.readFloat(),this.readFloat(),this.readFloat(),this.readFloat());
				break;
			case 3:
				drawLayer.bezierCurveTo(this.readFloat(),this.readFloat(),this.readFloat(),this.readFloat(),this.readFloat(),this.readFloat());
				break;
			case 4:
				drawLayer.arc(this.readFloat(),this.readFloat(),this.readFloat(),this.readRotation(1),this.readRotation(1),this.readBool());
				break;
			case 5:
				drawLayer.arcTo(this.readFloat(),this.readFloat(),this.readFloat(),this.readFloat(),this.readFloat());
				break;
			case 6:
				drawLayer.fill();
				break;
			case 7:
				drawLayer.closePath();
				break;
			case 8:
				drawLayer.drawCircle(this.readFloat(),this.readFloat(),this.readFloat());
				break;
			case 9:
				drawLayer.drawEllipse(this.readFloat(),this.readFloat(),this.readFloat(),this.readFloat());
				break;
			case 10:
				drawLayer.drawRectangle(this.readFloat(),this.readFloat(),this.readFloat(),this.readFloat());
				break;
			case 11:
				drawLayer.drawRoundedRectangle(this.readFloat(),this.readFloat(),this.readFloat(),this.readFloat(),this.readFloat());
				break;
			case 12:
				var tmp = this.readFloat();
				var tmp1 = this.readFloat();
				var points = this.readUInt16();
				drawLayer.drawRegularPolygon(tmp,tmp1,points,this.readFloat(),this.readRotation(points));
				break;
			case 13:
				var tmp2 = this.readFloat();
				var tmp3 = this.readFloat();
				var points1 = this.readUInt16();
				drawLayer.drawStar(tmp2,tmp3,points1,this.readFloat(),this.readFloat(),this.readRotation(points1));
				break;
			case 14:
				drawLayer.drawGrid(this.readFloat(),this.readFloat(),this.readUInt16(),this.readUInt16(),this.readFloat(),this.readFloat());
				break;
			case 15:
				drawLayer.drawColumns(this.readFloat(),this.readFloat(),this.readFloat(),this.readFloat(),this.readArrayFloat());
				break;
			case 16:
				drawLayer.multplyTransform(this.readFloat(),this.readFloat(),this.readFloat(),this.readFloat(),this.readFloat(),this.readFloat());
				break;
			case 17:
				drawLayer.resetTransform(this.readFloat(),this.readFloat(),this.readFloat(),this.readFloat(),this.readFloat(),this.readFloat());
				break;
			case 18:
				drawLayer.multplyAlpha(this.readAlpha());
				break;
			case 19:
				drawLayer.resetAlpha(this.readAlpha());
				break;
			case 20:
				drawLayer.setLineAlpha(this.readAlpha());
				break;
			case 21:
				drawLayer.setFillAlpha(this.readAlpha());
				break;
			case 22:
				drawLayer.setLineColor(this.readUInt24());
				break;
			case 23:
				drawLayer.setFillColor(this.readUInt24());
				break;
			case 24:
				drawLayer.setLineThickness(this.readFloat());
				break;
			case 25:
				drawLayer.setBlendMode(vilog__$BlendMode_BlendMode_$Impl_$._new(this.readByte()));
				break;
			case 26:
				drawLayer.setLineAlignment(this.readFloat());
				break;
			case 27:
				drawLayer.setFonts(this.readArrayString());
				break;
			case 28:
				drawLayer.setFontSize(this.readFloat());
				break;
			case 29:
				var flags = this.readByte();
				drawLayer.setFontStyle((flags & 1) == 1,(flags & 2) == 2);
				break;
			case 30:
				drawLayer.setTextHolizontalAlign(this.readFloat());
				break;
			case 31:
				drawLayer.setTextVerticalAlign(this.readFloat());
				break;
			case 32:
				drawLayer.drawText(this.readFloat(),this.readFloat(),this.readLongString());
				break;
			case 33:
				drawLayer.setImageHolizontalAlign(this.readFloat());
				break;
			case 34:
				drawLayer.setImageVerticalAlign(this.readFloat());
				break;
			case 35:
				drawLayer.drawImage(this.readFloat(),this.readFloat(),this.readShortString());
				break;
			case 36:
				drawLayer.startMaskingRegion();
				break;
			case 37:
				drawLayer.startMaskedRegion(this.readUInt16());
				break;
			case 38:
				drawLayer.endMaskRegion();
				break;
			case 39:
				this.referenceCommands(drawLayer,this.readUInt16(),this.readByte());
				break;
			case 40:
				this.referenceCommands(drawLayer,this.readUInt24(),this.readUInt16());
				break;
			case 41:
				this.referenceCommands(drawLayer,this.readInt32(),this.readUInt24());
				break;
			case 42:
				var toX = this.readFloat();
				var toY = this.readFloat();
				var flags1 = this.readByte();
				drawLayer.arrowTo(toX,toY,(flags1 & 1) == 1,(flags1 & 2) == 2,(flags1 & 4) == 4,this.readFloat(),this.readFloat());
				break;
			case 43:
				var ctrlX = this.readFloat();
				var ctrlY = this.readFloat();
				var toX1 = this.readFloat();
				var toY1 = this.readFloat();
				var flags2 = this.readByte();
				drawLayer.curveArrowTo(ctrlX,ctrlY,toX1,toY1,(flags2 & 1) == 1,(flags2 & 2) == 2,(flags2 & 4) == 4,this.readFloat(),this.readFloat());
				break;
			case 44:
				var ctrlX1 = this.readFloat();
				var ctrlY1 = this.readFloat();
				var radius = this.readFloat();
				var startAngle = this.readRotation(1);
				var endAngle = this.readRotation(1);
				var flags3 = this.readByte();
				drawLayer.arcArrow(ctrlX1,ctrlY1,radius,startAngle,endAngle,(flags3 & 1) == 1,(flags3 & 2) == 2,(flags3 & 4) == 4,(flags3 & 8) == 8,this.readFloat(),this.readFloat());
				break;
			default:
				var value = _g;
				throw new js__$Boot_HaxeError("unsupported visual command: " + value + " position:" + this.position);
			}
		}
	}
	,referenceCommands: function(drawLayer,begin,length) {
		var currentPosition = this.position;
		this.proceedCommands(drawLayer,begin,length);
		this.position = currentPosition;
	}
});
var visualizer_ContentKind = $hxEnums["visualizer.ContentKind"] = { __ename__ : true, __constructs__ : ["Visual","Trace"]
	,Visual: {_hx_index:0,__enum__:"visualizer.ContentKind",toString:$estr}
	,Trace: {_hx_index:1,__enum__:"visualizer.ContentKind",toString:$estr}
};
var visualizer_Visualizer = function(element) {
	this.element = element;
	var traceViews = [];
	var visualViews = [];
	var targets = [];
	var _g = 0;
	var _g1 = element.getElementsByClassName("visual");
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		var src = child.getAttribute("src");
		if(src != null) {
			targets.push(new visualizer_state_VisualizerContent(child,src,visualizer_ContentKind.Visual));
			visualViews.push(new visualizer_visual_VisualView(child));
		}
	}
	var _g2 = 0;
	var _g3 = element.getElementsByClassName("trace");
	while(_g2 < _g3.length) {
		var child1 = _g3[_g2];
		++_g2;
		var src1 = child1.getAttribute("src");
		if(src1 != null) {
			targets.push(new visualizer_state_VisualizerContent(child1,src1,visualizer_ContentKind.Trace));
			traceViews.push(new visualizer_trace_TraceView(child1));
		}
	}
	this.view = new visualizer_VisualizerView(this,element,traceViews,visualViews);
	this.state = visualizer_state_VisualizerState.Loading(new visualizer_state_VisualizerLoadingState(this,targets));
};
visualizer_Visualizer.__name__ = true;
visualizer_Visualizer.prototype = {
	update: function(time) {
		var _g = this.state;
		switch(_g._hx_index) {
		case 0:
			break;
		case 1:
			var state = _g.state;
			state.update();
			break;
		case 2:
			var state1 = _g.state;
			state1.update(time);
			break;
		}
		this.view.draw();
	}
};
var visualizer_VisualizerView = function(visualizer1,root,traceViews,visualViews) {
	this.root = root;
	this.visualizer = visualizer1;
	var elements = [];
	var _g = 0;
	var _g1 = root.childNodes;
	while(_g < _g1.length) {
		var node = _g1[_g];
		++_g;
		elements.push(node);
	}
	var row = util_ElementUtil.div({ "class" : "row"},[]);
	var content = util_ElementUtil.div({ "class" : "row"},[]);
	var content1 = util_ElementUtil.div({ "class" : "content"},[row,content]);
	root.appendChild(content1);
	var _g2 = 0;
	while(_g2 < elements.length) {
		var element = elements[_g2];
		++_g2;
		row.appendChild(element);
	}
	this.traceViews = traceViews;
	this.visualViews = visualViews;
	this.controlView = new visualizer_ctrl_VisualControlView(visualizer1,content1);
};
visualizer_VisualizerView.__name__ = true;
visualizer_VisualizerView.prototype = {
	draw: function() {
		var _g = this.visualizer.state;
		switch(_g._hx_index) {
		case 0:case 1:
			this.controlView.stop();
			var _g1 = 0;
			var _g11 = this.traceViews;
			while(_g1 < _g11.length) {
				var traceView = _g11[_g1];
				++_g1;
				traceView.clear();
			}
			var _g2 = 0;
			var _g3 = this.visualViews;
			while(_g2 < _g3.length) {
				var visualView = _g3[_g2];
				++_g2;
				visualView.clear();
			}
			break;
		case 2:
			var state = _g.state;
			this.controlView.update(state);
			var _g4 = 0;
			var _g12 = this.traceViews.length;
			while(_g4 < _g12) {
				var index = _g4++;
				var traceView1 = this.traceViews[index];
				traceView1.draw(state.traceReaders[index],state.maxHeight,state.get_step());
			}
			var _g21 = 0;
			var _g31 = this.visualViews.length;
			while(_g21 < _g31) {
				var index1 = _g21++;
				var visualView1 = this.visualViews[index1];
				visualView1.draw(state.visualReaders[index1],state.get_step());
			}
			break;
		}
	}
};
var visualizer_ctrl_VisualControlView = function(visualizer1,container) {
	this.visualizer = visualizer1;
	this.step = -1;
	this.frameSize = 0;
	this.playing = false;
	this.previousPlaying = false;
	this.controling = false;
	var tmp = util_ElementUtil.span({ "class" : "icon-sb_playback_rewind"},"");
	var tmp1 = this.backwardButton = util_ElementUtil.element("button",{ "class" : "small", disabled : "disabled"},[tmp]);
	var tmp2 = util_ElementUtil.span({ "class" : "icon-sb_playback_play"},"");
	var tmp3 = this.startButton = util_ElementUtil.element("button",{ "class" : "big", disabled : "disabled"},[tmp2]);
	var tmp4 = util_ElementUtil.span({ "class" : "icon-sb_playback_fastforward"},"");
	var tmp5 = this.forwardButton = util_ElementUtil.element("button",{ "class" : "small", disabled : "disabled"},[tmp4]);
	var tmp6 = this.frameRange = util_ElementUtil.element("input",{ "class" : "frame-range", type : "range", value : "0", min : "0", max : "0", step : "1", disabled : "disabled"},[]);
	var tmp7 = util_ElementUtil.span({ "class" : "icon-sb_arrow_d_left"},"");
	var tmp8 = this.fastBackstepButton = util_ElementUtil.element("button",{ "class" : "small", disabled : "disabled"},[tmp7]);
	var tmp9 = util_ElementUtil.span({ "class" : "icon-sb_arrow_s_left"},"");
	var tmp10 = this.backstepButton = util_ElementUtil.element("button",{ "class" : "small", disabled : "disabled"},[tmp9]);
	var tmp11 = this.frameText = util_ElementUtil.span({ "class" : "frame-text"},"");
	var tmp12 = util_ElementUtil.span({ "class" : "icon-sb_arrow_s_right"},"");
	var tmp13 = this.stepButton = util_ElementUtil.element("button",{ "class" : "small", disabled : "disabled"},[tmp12]);
	var tmp14 = util_ElementUtil.span({ "class" : "icon-sb_arrow_d_right"},"");
	var tmp15 = this.fastStepButton = util_ElementUtil.element("button",{ "class" : "small", disabled : "disabled"},[tmp14]);
	container.appendChild(util_ElementUtil.div({ "class" : "row"},[tmp1,tmp3,tmp5,tmp6,tmp8,tmp10,tmp11,tmp13,tmp15]));
	this.backwardButton.addEventListener("mousedown",$bind(this,this.onBackwardDown));
	this.forwardButton.addEventListener("mousedown",$bind(this,this.onForwardDown));
	window.addEventListener("mouseup",$bind(this,this.onWindowUp));
	this.frameRange.addEventListener("input",$bind(this,this.onFrameRangeInput));
	this.frameRange.addEventListener("change",$bind(this,this.onFrameRangeChange));
	this.startButton.addEventListener("click",$bind(this,this.onStartClick));
	this.fastBackstepButton.addEventListener("click",$bind(this,this.onFastBackstepClick));
	this.backstepButton.addEventListener("click",$bind(this,this.onBackstepClick));
	this.fastStepButton.addEventListener("click",$bind(this,this.onFastStepClick));
	this.stepButton.addEventListener("click",$bind(this,this.onStepClick));
};
visualizer_ctrl_VisualControlView.__name__ = true;
visualizer_ctrl_VisualControlView.prototype = {
	onForwardDown: function(e) {
		var input = e.target;
		var _g = this.visualizer.state;
		switch(_g._hx_index) {
		case 0:case 1:
			break;
		case 2:
			var state = _g.state;
			if(!this.controling) {
				this.controling = true;
				this.previousPlaying = state.playing;
				this.previousFps = state.fps;
				state.playing = true;
				state.fps *= 10;
			}
			break;
		}
	}
	,onBackwardDown: function(e) {
		var input = e.target;
		var _g = this.visualizer.state;
		switch(_g._hx_index) {
		case 0:case 1:
			break;
		case 2:
			var state = _g.state;
			if(!this.controling) {
				this.controling = true;
				this.previousPlaying = state.playing;
				this.previousFps = state.fps;
				state.playing = true;
				state.fps *= -10;
			}
			break;
		}
	}
	,onWindowUp: function(e) {
		var input = e.target;
		var _g = this.visualizer.state;
		switch(_g._hx_index) {
		case 0:case 1:
			break;
		case 2:
			var state = _g.state;
			if(this.controling) {
				this.controling = false;
				state.playing = this.previousPlaying;
				state.fps = this.previousFps;
			}
			break;
		}
	}
	,onFrameRangeInput: function(e) {
		var input = e.target;
		var _g = this.visualizer.state;
		switch(_g._hx_index) {
		case 0:case 1:
			break;
		case 2:
			var state = _g.state;
			if(!this.controling) {
				this.controling = true;
				this.previousPlaying = state.playing;
				this.previousFps = state.fps;
				state.playing = false;
			}
			state.goto(parseFloat(input.value));
			break;
		}
	}
	,onFrameRangeChange: function(e) {
		var input = e.target;
		var _g = this.visualizer.state;
		switch(_g._hx_index) {
		case 0:case 1:
			break;
		case 2:
			var state = _g.state;
			if(this.controling) {
				this.controling = false;
				state.playing = this.previousPlaying;
			}
			state.goto(parseFloat(input.value));
			break;
		}
	}
	,onStartClick: function(e) {
		var _g = this.visualizer.state;
		switch(_g._hx_index) {
		case 0:case 1:
			break;
		case 2:
			var state = _g.state;
			state.playing = !state.playing;
			break;
		}
	}
	,onFastBackstepClick: function(e) {
		var _g = this.visualizer.state;
		switch(_g._hx_index) {
		case 0:case 1:
			break;
		case 2:
			var state = _g.state;
			state.proceed(-5);
			break;
		}
	}
	,onBackstepClick: function(e) {
		var _g = this.visualizer.state;
		switch(_g._hx_index) {
		case 0:case 1:
			break;
		case 2:
			var state = _g.state;
			state.proceed(-1);
			break;
		}
	}
	,onStepClick: function(e) {
		var _g = this.visualizer.state;
		switch(_g._hx_index) {
		case 0:case 1:
			break;
		case 2:
			var state = _g.state;
			state.proceed(1);
			break;
		}
	}
	,onFastStepClick: function(e) {
		var _g = this.visualizer.state;
		switch(_g._hx_index) {
		case 0:case 1:
			break;
		case 2:
			var state = _g.state;
			state.proceed(5);
			break;
		}
	}
	,stop: function() {
		util_ElementUtil.enable(this.forwardButton,false);
		util_ElementUtil.enable(this.startButton,false);
		util_ElementUtil.enable(this.backwardButton,false);
		util_ElementUtil.enable(this.backstepButton,false);
		util_ElementUtil.enable(this.frameRange,false);
		util_ElementUtil.enable(this.stepButton,false);
		util_ElementUtil.enable(this.fastBackstepButton,false);
		util_ElementUtil.enable(this.fastStepButton,false);
	}
	,update: function(state) {
		util_ElementUtil.enable(this.forwardButton,true);
		util_ElementUtil.enable(this.startButton,true);
		util_ElementUtil.enable(this.backwardButton,true);
		util_ElementUtil.enable(this.backstepButton,true);
		util_ElementUtil.enable(this.frameRange,true);
		util_ElementUtil.enable(this.stepButton,true);
		util_ElementUtil.enable(this.fastBackstepButton,true);
		util_ElementUtil.enable(this.fastStepButton,true);
		if(this.playing != state.playing) {
			this.playing = state.playing;
			this.startButton.removeChild(this.startButton.firstChild);
			this.startButton.appendChild(util_ElementUtil.span({ "class" : state.playing ? "icon-sb_playback_suspend" : "icon-sb_playback_play"},""));
		}
		if(this.step != state.get_step() || this.frameSize != state.frameSize) {
			this.frameSize = state.frameSize;
			this.frameRange.setAttribute("max",this.frameSize - 1 + "");
			util_ElementUtil.setText(this.frameText,state.get_step() + 1 + "/" + state.frameSize);
		}
		if(this.step != state.get_step()) {
			this.step = state.get_step();
			this.frameRange.value = this.step + "";
		}
	}
};
var visualizer_state_VisualizerContent = function(element,src,kind) {
	this.kind = kind;
	this.src = src;
	this.element = element;
};
visualizer_state_VisualizerContent.__name__ = true;
var visualizer_state_VisualizerDisplayState = function(visualReaders,traceReaders) {
	this.fps = 60;
	this.traceReaders = traceReaders;
	this.visualReaders = visualReaders;
	this._step = 0;
	this.frameSize = 0;
	this.playing = false;
	this.maxHeight = -1;
	var _g = 0;
	while(_g < traceReaders.length) {
		var reader = traceReaders[_g];
		++_g;
		this.fps = reader.config.fps;
		var a = this.frameSize;
		if(_$UInt_UInt_$Impl_$.gt(reader.get_frameSize(),a)) {
			this.frameSize = reader.get_frameSize();
		}
	}
	var _g1 = 0;
	while(_g1 < visualReaders.length) {
		var reader1 = visualReaders[_g1];
		++_g1;
		this.fps = reader1.config.fps;
		if(this.maxHeight < reader1.config.height) {
			this.maxHeight = reader1.config.height;
		}
		var a1 = this.frameSize;
		if(_$UInt_UInt_$Impl_$.gt(reader1.get_frameSize(),a1)) {
			this.frameSize = reader1.get_frameSize();
		}
	}
};
visualizer_state_VisualizerDisplayState.__name__ = true;
visualizer_state_VisualizerDisplayState.prototype = {
	get_step: function() {
		return this._step | 0;
	}
	,getTraceLog: function(index) {
		return this.traceReaders[index].getText(this.get_step() | 0);
	}
	,drawVisualLog: function(index,previousStep,drawTarget) {
		this.visualReaders[index].draw(previousStep,this.get_step() | 0,drawTarget);
		return;
	}
	,update: function(time) {
		if(this.playing) {
			this.proceed(time / 1000 * this.fps);
		}
	}
	,goto: function(step) {
		this._step = step;
		if(this._step > this.frameSize - 1) {
			this._step = this.frameSize - 1;
			this.playing = false;
		} else if(this._step < 0) {
			this._step = 0;
			this.playing = false;
		}
	}
	,proceed: function(step) {
		this.goto(this._step + step);
	}
};
var visualizer_state_VisualizerLoadingState = function(visualizer1,targets) {
	this.targets = targets;
	this.visualizer = visualizer1;
	var _g = [];
	var _g1 = 0;
	while(_g1 < targets.length) {
		var target = targets[_g1];
		++_g1;
		_g.push(visualizer_state_VisualizerSourceState.Loading);
	}
	this.states = _g;
	var _g2 = 0;
	var _g3 = targets.length;
	while(_g2 < _g3) {
		var index = _g2++;
		var target1 = targets[index];
		this.startLoad(target1.src,target1.kind,index);
	}
};
visualizer_state_VisualizerLoadingState.__name__ = true;
visualizer_state_VisualizerLoadingState.prototype = {
	startLoad: function(source,kind,index) {
		var _gthis = this;
		var request = new XMLHttpRequest();
		request.open("GET",source,true);
		request.responseType = "arraybuffer";
		request.onload = function() {
			if(request.status == 200) {
				var arrayBuffer = request.response;
				var input = new haxe_io_BytesInput(haxe_io_Bytes.ofData(arrayBuffer));
				_gthis.finishLoad(source,input,kind,index);
			} else {
				_gthis.errorLoad(source,"Http status code " + request.status,kind,index);
			}
		};
		request.onerror = function(e) {
			_gthis.errorLoad(source,e.message,kind,index);
		};
		request.send();
	}
	,errorLoad: function(name,text,kind,index) {
		this.states[index] = visualizer_state_VisualizerSourceState.Error(text);
	}
	,finishLoad: function(name,input,kind,index) {
		this.states[index] = visualizer_state_VisualizerSourceState.Loaded(input);
	}
	,update: function() {
		var loaded = true;
		var _g = 0;
		var _g1 = this.states;
		while(_g < _g1.length) {
			var state = _g1[_g];
			++_g;
			switch(state._hx_index) {
			case 0:
				loaded = false;
				break;
			case 1:
				var string = state.message;
				loaded = false;
				break;
			case 2:
				break;
			}
		}
		if(loaded) {
			var visualReaders = [];
			var traceReaders = [];
			var _g2 = 0;
			var _g3 = this.states.length;
			while(_g2 < _g3) {
				var index = _g2++;
				var state1 = this.states[index];
				var target = this.targets[index];
				switch(state1._hx_index) {
				case 0:case 1:
					break;
				case 2:
					var input = state1.input;
					switch(target.kind._hx_index) {
					case 0:
						var reader = new vilog_VilogReader(new seekable_SeekableBytesReader(input));
						visualReaders.push(reader);
						break;
					case 1:
						traceReaders.push(new trlog_TrlogReader(new seekable_SeekableBytesReader(input)));
						break;
					}
					break;
				}
			}
			this.visualizer.state = visualizer_state_VisualizerState.Display(new visualizer_state_VisualizerDisplayState(visualReaders,traceReaders));
		}
	}
};
var visualizer_state_VisualizerSourceState = $hxEnums["visualizer.state.VisualizerSourceState"] = { __ename__ : true, __constructs__ : ["Loading","Error","Loaded"]
	,Loading: {_hx_index:0,__enum__:"visualizer.state.VisualizerSourceState",toString:$estr}
	,Error: ($_=function(message) { return {_hx_index:1,message:message,__enum__:"visualizer.state.VisualizerSourceState",toString:$estr}; },$_.__params__ = ["message"],$_)
	,Loaded: ($_=function(input) { return {_hx_index:2,input:input,__enum__:"visualizer.state.VisualizerSourceState",toString:$estr}; },$_.__params__ = ["input"],$_)
};
var visualizer_state_VisualizerState = $hxEnums["visualizer.state.VisualizerState"] = { __ename__ : true, __constructs__ : ["None","Loading","Display"]
	,None: {_hx_index:0,__enum__:"visualizer.state.VisualizerState",toString:$estr}
	,Loading: ($_=function(state) { return {_hx_index:1,state:state,__enum__:"visualizer.state.VisualizerState",toString:$estr}; },$_.__params__ = ["state"],$_)
	,Display: ($_=function(state) { return {_hx_index:2,state:state,__enum__:"visualizer.state.VisualizerState",toString:$estr}; },$_.__params__ = ["state"],$_)
};
var visualizer_trace_TraceView = function(traceArea) {
	this.traceArea = traceArea;
	this.height = traceArea.scrollHeight;
	this.step = -1;
	this.traceLog = "";
};
visualizer_trace_TraceView.__name__ = true;
visualizer_trace_TraceView.prototype = {
	clear: function() {
		var newTraceLog = "";
		this.step = -1;
		if(this.traceLog != newTraceLog) {
			util_ElementUtil.setText(this.traceArea,newTraceLog);
			this.traceLog = newTraceLog;
		}
	}
	,draw: function(reader,newHeight,newStep) {
		if(newHeight >= 0 && newHeight != this.height) {
			this.height = newHeight;
			this.traceArea.style.height = this.height + "px";
		}
		if(newStep != this.step) {
			this.step = newStep;
			var newTraceLog = reader.getText(this.step);
			if(this.traceLog != newTraceLog) {
				util_ElementUtil.setText(this.traceArea,newTraceLog);
				this.traceLog = newTraceLog;
			}
		}
	}
};
var visualizer_visual_VilogDrawView = function(visualElement,width,height) {
	this.application = new pixi_plugins_app_Application();
	this.application.width = width;
	this.application.height = height;
	this.application.position = "relative";
	this.application.autoResize = false;
	this.application.antialias = true;
	this.application.start("",visualElement,null);
	this.background = new PIXI.Graphics();
	this.application.stage.addChild(this.background);
	this.previousBackground = 0;
	this.init();
};
visualizer_visual_VilogDrawView.__name__ = true;
visualizer_visual_VilogDrawView.prototype = {
	clear: function() {
		if(this.previousReader != null) {
			this.init();
		}
	}
	,init: function() {
		this.previousStep = -1;
		this.previousReader = null;
		if(this.layers != null) {
			var _g = 0;
			var _g1 = this.layers;
			while(_g < _g1.length) {
				var layer = _g1[_g];
				++_g;
				layer.clear();
			}
		}
		this.layers = null;
		this.depthToIndex = null;
		this.drawBackground(-1);
	}
	,draw: function(reader,step) {
		if(this.previousReader != reader) {
			if(reader != null) {
				reader.prepare();
				this.depthToIndex = new haxe_ds_IntMap();
				this.layers = [];
				var index = 0;
				var _g = 0;
				var _g1 = reader.layers;
				while(_g < _g1.length) {
					var readerLayer = _g1[_g];
					++_g;
					this.depthToIndex.h[readerLayer.layerDepth] = index;
					this.layers.push(new visualizer_visual_VilogLayerDrawView(this.application.stage));
					++index;
				}
				this.drawBackground(reader.config.background);
			}
			this.previousReader = reader;
		}
		if(this.previousStep != step) {
			reader.draw(this.previousStep,step,this);
			this.previousStep = step;
		}
	}
	,drawBackground: function(argb) {
		if(this.previousBackground != argb) {
			this.background.clear();
			var rgb = argb & 16777215;
			var alphaChannel = argb >>> 24 & 255;
			if(alphaChannel != 255) {
				this.application.transparent = true;
				this.application.backgroundColor = rgb;
			} else {
				this.background.beginFill(rgb,_$UInt_UInt_$Impl_$.toFloat(alphaChannel) / _$UInt_UInt_$Impl_$.toFloat(255));
				this.background.drawRect(0,0,this.application.width,this.application.height);
				this.background.endFill();
			}
			this.previousBackground = argb;
		}
	}
	,getLayer: function(layerDepth) {
		return this.layers[this.depthToIndex.h[layerDepth]];
	}
};
var visualizer_visual_VilogLayerDrawView = function(parent) {
	this.parent = parent;
	parent.addChild(this.container = new PIXI.Container());
	this.maskingContainers = [];
	this.maskingState = visualizer_visual__$VilogLayerDrawView_MaskingState.None;
	this.matrix = new PIXI.Matrix();
	this.clear();
};
visualizer_visual_VilogLayerDrawView.__name__ = true;
visualizer_visual_VilogLayerDrawView.prototype = {
	getGraphics: function() {
		var _g = this.currentState;
		switch(_g._hx_index) {
		case 0:
			var graphics = _g.graphics;
			return graphics;
		case 1:
			var graphics1 = new PIXI.Graphics();
			this.currentState = visualizer_visual__$VilogLayerDrawView_VisualLayerDrawViewState.Graphics(graphics1);
			graphics1.lineStyle(this.thickness,this.lineColor,this.lineAlpha * this.alpha,this.lineAlignment);
			graphics1.beginFill(this.fillColor,this.fillAlpha * this.alpha);
			graphics1.blendMode = this.blendMode;
			this.matrix.copy(graphics1.localTransform);
			this.add(graphics1);
			return graphics1;
		}
	}
	,getCurrentPosition: function() {
		var graphics = this.getGraphics();
		if(graphics.currentPath == null || graphics.currentPath.shape.points.length == 0) {
			return new PIXI.Point(0,0);
		}
		var points = graphics.currentPath.shape.points;
		return new PIXI.Point(points[points.length - 2],points[points.length - 1]);
	}
	,endGraphics: function() {
		this.currentState = visualizer_visual__$VilogLayerDrawView_VisualLayerDrawViewState.None;
	}
	,dispose: function() {
		this.parent.removeChild(this.container);
	}
	,clear: function() {
		this.maskingContainers.length = 0;
		this.container.removeChildren(0,this.container.children.length);
		this.alpha = 1;
		this.lineAlpha = 1;
		this.lineColor = 10066329;
		this.fillAlpha = 1;
		this.fillColor = 12303291;
		this.thickness = 1;
		this.lineAlignment = 0.5;
		this.textHolizontalAlign = 0;
		this.textVerticalAlign = 0;
		this.imageHolizontalAlign = 0;
		this.imageVerticalAlign = 0;
		this.fonts = ["helvetica","arial","hiragino kaku gothic pro","meiryo","ms pgothic","sans-serif"];
		this.blendMode = PIXI.BLEND_MODES.NORMAL;
		this.bold = false;
		this.italic = false;
		this.matrix.identity();
		this.currentState = visualizer_visual__$VilogLayerDrawView_VisualLayerDrawViewState.None;
	}
	,add: function(displayObject) {
		var _g = this.maskingState;
		switch(_g._hx_index) {
		case 0:
			var child = _g.container;
			child.addChild(displayObject);
			break;
		case 1:
			var child1 = _g.container;
			child1.addChild(displayObject);
			break;
		case 2:
			this.container.addChild(displayObject);
			break;
		}
	}
	,applyLineStyle: function() {
		var _g = this.currentState;
		switch(_g._hx_index) {
		case 0:
			var graphics = _g.graphics;
			graphics.lineStyle(this.thickness,this.lineColor,this.lineAlpha * this.alpha,this.lineAlignment);
			break;
		case 1:
			break;
		}
	}
	,applyFillStyle: function() {
		var _g = this.currentState;
		switch(_g._hx_index) {
		case 0:
			var graphics = _g.graphics;
			graphics.beginFill(this.fillColor,this.fillAlpha * this.alpha);
			break;
		case 1:
			break;
		}
	}
	,lineTo: function(toX,toY) {
		var from = this.getCurrentPosition();
		var value = 1e-8;
		this.getGraphics().lineTo(from.x + (toX - from.x) * value,from.y + (toY - from.y) * value);
		this.getGraphics().lineTo(toX,toY);
	}
	,moveTo: function(toX,toY) {
		this.getGraphics().moveTo(toX,toY);
		this.getGraphics().lineTo(toX,toY);
	}
	,quaraticCurveTo: function(ctrlX,ctrlY,toX,toY) {
		var from = this.getCurrentPosition();
		var value = 1e-8;
		this.getGraphics().lineTo(from.x + (ctrlX - from.x) * value,from.y + (ctrlX - from.y) * value);
		this.getGraphics().quadraticCurveTo(ctrlX,ctrlY,toX,toY);
	}
	,bezierCurveTo: function(ctrlX,ctrlY,ctrl2X,ctrl2Y,toX,toY) {
		var from = this.getCurrentPosition();
		var value = 1e-8;
		this.getGraphics().lineTo(from.x + (ctrlX - from.x) * value,from.y + (ctrlX - from.y) * value);
		this.getGraphics().bezierCurveTo(ctrlX,ctrlY,ctrl2X,ctrl2Y,toX,toY);
	}
	,arc: function(ctrlX,ctrlY,radius,startAngle,endAngle,anticlockwise) {
		this.getGraphics().arc(ctrlX,ctrlY,radius,startAngle,endAngle,anticlockwise);
	}
	,arcTo: function(ctrlX,ctrlY,toX,toY,radius) {
		this.getGraphics().arcTo(ctrlX,ctrlY,toX,toY,radius);
	}
	,fill: function() {
		this.getGraphics().endFill();
	}
	,closePath: function() {
		this.getGraphics().closePath();
	}
	,drawCircle: function(x,y,radius) {
		this.getGraphics().drawCircle(x,y,radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.getGraphics().drawEllipse(x,y,width,height);
	}
	,drawRectangle: function(x,y,width,height) {
		this.getGraphics().drawRect(x,y,width,height);
	}
	,drawRoundedRectangle: function(x,y,width,height,radius) {
		this.getGraphics().drawRoundedRect(x,y,width,height,radius);
	}
	,drawRegularPolygon: function(x,y,points,radius,rotation) {
		var startAngle = -Math.PI / 2 + rotation;
		var delta = Math.PI * 2 / _$UInt_UInt_$Impl_$.toFloat(points);
		var polygon = [];
		var _g = 0;
		var _g1 = points;
		while(_g < _g1) {
			var i = _g++;
			var angle = i * delta + startAngle;
			polygon.push(x + radius * Math.cos(angle));
			polygon.push(y + radius * Math.sin(angle));
		}
		this.getGraphics().drawPolygon(polygon);
	}
	,drawStar: function(x,y,points,radius,innerRadius,rotation) {
		this.getGraphics().drawStar(x,y,points,radius,innerRadius,rotation);
	}
	,drawGrid: function(x,y,gridWidth,gridHeight,cellWidth,cellHeight) {
		var width = _$UInt_UInt_$Impl_$.toFloat(gridWidth) * cellWidth;
		var height = _$UInt_UInt_$Impl_$.toFloat(gridHeight) * cellHeight;
		this.drawRectangle(x,y,width,height);
		var _g = 1;
		var _g1 = gridWidth;
		while(_g < _g1) {
			var i = _g++;
			this.moveTo(x + cellWidth * i,y);
			this.lineTo(x + cellWidth * i,y + height);
		}
		var _g2 = 1;
		var _g3 = gridHeight;
		while(_g2 < _g3) {
			var i1 = _g2++;
			this.moveTo(x,y + cellHeight * i1);
			this.lineTo(x + width,y + cellHeight * i1);
		}
	}
	,drawColumns: function(x,bottom,columnWidth,margin,heights,scaleY) {
		if(scaleY == null) {
			scaleY = 1;
		}
		var _g = 0;
		var _g1 = heights.length;
		while(_g < _g1) {
			var i = _g++;
			var height = heights[i];
			this.drawRectangle(x + (columnWidth + margin) * i,bottom - height * scaleY,columnWidth,height * scaleY);
		}
	}
	,arrowTo: function(toX,toY,tailVisible,bodyVisible,headVisible,arrowWidth,arrowLength) {
		var from = this.getCurrentPosition();
		if(bodyVisible) {
			this.lineTo(toX,toY);
		}
		if(tailVisible) {
			var r = Math.atan2(toY - from.y,toX - from.x);
			var x = arrowLength;
			var y = arrowWidth / 2;
			this.moveTo(from.x + x * Math.cos(r) - y * Math.sin(r),from.y + x * Math.sin(r) + y * Math.cos(r));
			this.lineTo(from.x,from.y);
			var x1 = arrowLength;
			var y1 = -arrowWidth / 2;
			this.lineTo(from.x + x1 * Math.cos(r) - y1 * Math.sin(r),from.y + x1 * Math.sin(r) + y1 * Math.cos(r));
		}
		if(headVisible) {
			var r1 = Math.atan2(toY - from.y,toX - from.x);
			var x2 = -arrowLength;
			var y2 = arrowWidth / 2;
			this.moveTo(toX + x2 * Math.cos(r1) - y2 * Math.sin(r1),toY + x2 * Math.sin(r1) + y2 * Math.cos(r1));
			this.lineTo(toX,toY);
			var x3 = -arrowLength;
			var y3 = -arrowWidth / 2;
			this.lineTo(toX + x3 * Math.cos(r1) - y3 * Math.sin(r1),toY + x3 * Math.sin(r1) + y3 * Math.cos(r1));
		}
	}
	,curveArrowTo: function(ctrlX,ctrlY,toX,toY,tailVisible,bodyVisible,headVisible,arrowWidth,arrowLength) {
		var from = this.getCurrentPosition();
		if(bodyVisible) {
			this.quaraticCurveTo(ctrlX,ctrlY,toX,toY);
		}
		if(tailVisible) {
			var r = Math.atan2(ctrlY - from.y,ctrlX - from.x);
			var x = arrowLength;
			var y = arrowWidth / 2;
			this.moveTo(from.x + x * Math.cos(r) - y * Math.sin(r),from.y + x * Math.sin(r) + y * Math.cos(r));
			this.lineTo(from.x,from.y);
			var x1 = arrowLength;
			var y1 = -arrowWidth / 2;
			this.lineTo(from.x + x1 * Math.cos(r) - y1 * Math.sin(r),from.y + x1 * Math.sin(r) + y1 * Math.cos(r));
		}
		if(headVisible) {
			var r1 = Math.atan2(toY - ctrlY,toX - ctrlX);
			var x2 = -arrowLength;
			var y2 = arrowWidth / 2;
			this.moveTo(toX + x2 * Math.cos(r1) - y2 * Math.sin(r1),toY + x2 * Math.sin(r1) + y2 * Math.cos(r1));
			this.lineTo(toX,toY);
			var x3 = -arrowLength;
			var y3 = -arrowWidth / 2;
			this.lineTo(toX + x3 * Math.cos(r1) - y3 * Math.sin(r1),toY + x3 * Math.sin(r1) + y3 * Math.cos(r1));
		}
	}
	,arcArrow: function(ctrlX,ctrlY,radius,startAngle,endAngle,anticlockwise,tailVisible,bodyVisible,headVisible,arrowWidth,arrowLength) {
		var from = this.getCurrentPosition();
		if(bodyVisible) {
			this.arc(ctrlX,ctrlY,radius,startAngle,endAngle,anticlockwise);
		}
		if(tailVisible) {
			var r = startAngle - Math.PI / 2 * (anticlockwise ? 1 : -1);
			var baseX = ctrlX + Math.cos(startAngle) * radius;
			var baseY = ctrlY + Math.sin(startAngle) * radius;
			var x = arrowLength;
			var y = arrowWidth / 2;
			this.moveTo(baseX + x * Math.cos(r) - y * Math.sin(r),baseY + x * Math.sin(r) + y * Math.cos(r));
			this.lineTo(baseX,baseY);
			var x1 = arrowLength;
			var y1 = -arrowWidth / 2;
			this.lineTo(baseX + x1 * Math.cos(r) - y1 * Math.sin(r),baseY + x1 * Math.sin(r) + y1 * Math.cos(r));
		}
		if(headVisible) {
			var r1 = endAngle + Math.PI / 2 * (anticlockwise ? 1 : -1);
			var baseX1 = ctrlX + Math.cos(endAngle) * radius;
			var baseY1 = ctrlY + Math.sin(endAngle) * radius;
			var x2 = arrowLength;
			var y2 = arrowWidth / 2;
			this.moveTo(baseX1 + x2 * Math.cos(r1) - y2 * Math.sin(r1),baseY1 + x2 * Math.sin(r1) + y2 * Math.cos(r1));
			this.lineTo(baseX1,baseY1);
			var x3 = arrowLength;
			var y3 = -arrowWidth / 2;
			this.lineTo(baseX1 + x3 * Math.cos(r1) - y3 * Math.sin(r1),baseY1 + x3 * Math.sin(r1) + y3 * Math.cos(r1));
		}
	}
	,multplyTransform: function(a,b,c,d,tx,ty) {
		if(this.matrix.a != 1 || this.matrix.b != 0 || this.matrix.c != 0 || this.matrix.d != 1 || this.matrix.tx != 0 || this.matrix.ty != 0) {
			var a1 = this.matrix.a;
			var b1 = this.matrix.b;
			var c1 = this.matrix.c;
			var d1 = this.matrix.d;
			this.matrix.a = a * a1 + b * c1;
			this.matrix.b = a * b1 + b * d1;
			this.matrix.c = c * a1 + d * c1;
			this.matrix.d = c * b1 + d * d1;
			this.matrix.tx = tx * a1 + ty * c1 + this.matrix.tx;
			this.matrix.ty = tx * b1 + ty * d1 + this.matrix.ty;
			this.endGraphics();
		}
	}
	,resetTransform: function(a,b,c,d,tx,ty) {
		if(this.matrix.a != a || this.matrix.b != b || this.matrix.c != c || this.matrix.d != d || this.matrix.tx != tx || this.matrix.ty != ty) {
			this.matrix.a = a;
			this.matrix.b = b;
			this.matrix.c = c;
			this.matrix.d = d;
			this.matrix.tx = tx;
			this.matrix.ty = ty;
			this.endGraphics();
		}
	}
	,multplyAlpha: function(alpha) {
		this.alpha *= alpha;
		this.applyLineStyle();
		this.applyFillStyle();
	}
	,resetAlpha: function(alpha) {
		this.alpha = alpha;
		this.applyLineStyle();
		this.applyFillStyle();
	}
	,setLineAlpha: function(alpha) {
		this.lineAlpha = alpha;
		this.applyLineStyle();
	}
	,setFillAlpha: function(alpha) {
		this.fillAlpha = alpha;
		this.applyFillStyle();
	}
	,setLineColor: function(rgb) {
		this.lineColor = rgb;
		this.applyLineStyle();
	}
	,setFillColor: function(rgb) {
		this.fillColor = rgb;
		this.applyFillStyle();
	}
	,setLineThickness: function(thickness) {
		this.thickness = thickness;
		this.applyLineStyle();
	}
	,setBlendMode: function(blendMode) {
		var newBlendMode;
		switch(blendMode) {
		case 0:
			newBlendMode = PIXI.BLEND_MODES.NORMAL;
			break;
		case 1:
			newBlendMode = PIXI.BLEND_MODES.ADD;
			break;
		case 2:
			newBlendMode = PIXI.BLEND_MODES.MULTIPLY;
			break;
		case 3:
			newBlendMode = PIXI.BLEND_MODES.SCREEN;
			break;
		case 4:
			newBlendMode = PIXI.BLEND_MODES.OVERLAY;
			break;
		case 5:
			newBlendMode = PIXI.BLEND_MODES.DARKEN;
			break;
		case 6:
			newBlendMode = PIXI.BLEND_MODES.LIGHTEN;
			break;
		case 7:
			newBlendMode = PIXI.BLEND_MODES.COLOR_DODGE;
			break;
		case 8:
			newBlendMode = PIXI.BLEND_MODES.COLOR_BURN;
			break;
		case 9:
			newBlendMode = PIXI.BLEND_MODES.HARD_LIGHT;
			break;
		case 10:
			newBlendMode = PIXI.BLEND_MODES.SOFT_LIGHT;
			break;
		case 11:
			newBlendMode = PIXI.BLEND_MODES.DIFFERENCE;
			break;
		case 12:
			newBlendMode = PIXI.BLEND_MODES.EXCLUSION;
			break;
		case 13:
			newBlendMode = PIXI.BLEND_MODES.HUE;
			break;
		case 14:
			newBlendMode = PIXI.BLEND_MODES.SATURATION;
			break;
		case 15:
			newBlendMode = PIXI.BLEND_MODES.COLOR;
			break;
		case 16:
			newBlendMode = PIXI.BLEND_MODES.LUMINOSITY;
			break;
		}
		if(this.blendMode != newBlendMode) {
			this.blendMode = newBlendMode;
			this.endGraphics();
		}
	}
	,setLineAlignment: function(alignment) {
		this.lineAlignment = alignment;
		this.applyLineStyle();
	}
	,setFonts: function(fonts) {
		this.fonts = fonts;
	}
	,setFontSize: function(size) {
		this.fontSize = size;
	}
	,setFontStyle: function(bold,italic) {
		this.bold = bold;
		this.italic = italic;
	}
	,setTextHolizontalAlign: function(align) {
		this.textHolizontalAlign = align;
	}
	,setTextVerticalAlign: function(align) {
		this.textVerticalAlign = align;
	}
	,drawText: function(x,y,string) {
		this.endGraphics();
		var maxScale = this.matrix.a > this.matrix.d ? this.matrix.a : this.matrix.d;
		var scaleX = this.matrix.a / maxScale;
		var scaleY = this.matrix.d / maxScale;
		var text = new PIXI.Text(string,{ fill : this.fillColor, fontSize : this.fontSize * maxScale, fontFamily : this.fonts, fontStyle : this.italic ? "italic" : "normal", fontWeight : this.bold ? "bold" : "normal"});
		text.x = x * this.matrix.a + y * this.matrix.c + this.matrix.tx;
		text.y = x * this.matrix.b + y * this.matrix.d + this.matrix.ty;
		text.scale.x = scaleX;
		text.skew.x = this.matrix.b;
		text.skew.y = this.matrix.c;
		text.scale.y = scaleY;
		text.alpha = this.alpha * this.fillAlpha;
		text.blendMode = this.blendMode;
		if(this.textHolizontalAlign != 0) {
			text.x -= this.textHolizontalAlign * text.width;
		}
		if(this.textVerticalAlign != 0) {
			text.y -= this.textVerticalAlign * text.height;
		}
		this.add(text);
	}
	,setImageHolizontalAlign: function(align) {
		this.imageHolizontalAlign = align;
	}
	,setImageVerticalAlign: function(align) {
		this.imageVerticalAlign = align;
	}
	,drawImage: function(x,y,path) {
		this.endGraphics();
		var image = new PIXI.Sprite(PIXI.Texture.fromFrame(path));
		image.alpha = this.alpha * this.fillAlpha;
		image.blendMode = this.blendMode;
		image.x = x - this.imageHolizontalAlign * image.width;
		image.y = y - this.imageVerticalAlign * image.height;
		this.matrix.copy(image.localTransform);
		this.add(image);
	}
	,startMaskingRegion: function() {
		this.endMaskRegion();
		var child = new PIXI.Container();
		this.maskingContainers.push(child);
		this.maskingState = visualizer_visual__$VilogLayerDrawView_MaskingState.Masking(child);
	}
	,startMaskedRegion: function(maskIndexFromLast) {
		this.endMaskRegion();
		var child = new PIXI.Container();
		child.mask = this.maskingContainers[this.maskingContainers.length - maskIndexFromLast - 1];
		this.maskingState = visualizer_visual__$VilogLayerDrawView_MaskingState.Masked(child);
	}
	,endMaskRegion: function() {
		this.endGraphics();
		this.maskingState = visualizer_visual__$VilogLayerDrawView_MaskingState.None;
	}
};
var visualizer_visual__$VilogLayerDrawView_VisualLayerDrawViewState = $hxEnums["visualizer.visual._VilogLayerDrawView.VisualLayerDrawViewState"] = { __ename__ : true, __constructs__ : ["Graphics","None"]
	,Graphics: ($_=function(graphics) { return {_hx_index:0,graphics:graphics,__enum__:"visualizer.visual._VilogLayerDrawView.VisualLayerDrawViewState",toString:$estr}; },$_.__params__ = ["graphics"],$_)
	,None: {_hx_index:1,__enum__:"visualizer.visual._VilogLayerDrawView.VisualLayerDrawViewState",toString:$estr}
};
var visualizer_visual__$VilogLayerDrawView_MaskingState = $hxEnums["visualizer.visual._VilogLayerDrawView.MaskingState"] = { __ename__ : true, __constructs__ : ["Masked","Masking","None"]
	,Masked: ($_=function(container) { return {_hx_index:0,container:container,__enum__:"visualizer.visual._VilogLayerDrawView.MaskingState",toString:$estr}; },$_.__params__ = ["container"],$_)
	,Masking: ($_=function(container) { return {_hx_index:1,container:container,__enum__:"visualizer.visual._VilogLayerDrawView.MaskingState",toString:$estr}; },$_.__params__ = ["container"],$_)
	,None: {_hx_index:2,__enum__:"visualizer.visual._VilogLayerDrawView.MaskingState",toString:$estr}
};
var visualizer_visual_VisualView = function(visualElement) {
	this.width = visualElement.scrollWidth;
	this.height = visualElement.scrollHeight;
	this.visualElement = visualElement;
	this.layerHeight = 0;
	this.background = -1;
	this.drawView = new visualizer_visual_VilogDrawView(visualElement,this.width,this.height);
};
visualizer_visual_VisualView.__name__ = true;
visualizer_visual_VisualView.prototype = {
	clear: function() {
		this.drawView.clear();
	}
	,draw: function(reader,step) {
		var newWidth = reader.config.width;
		var newHeight = reader.config.height;
		this.drawView.draw(reader,step);
		if(newWidth != this.width || newHeight != this.height) {
			this.drawView.application.renderer.resize(newWidth,newHeight);
		}
		if(newWidth != this.width) {
			this.width = newWidth;
			this.drawView.application.width = this.width;
			this.drawView.application.canvas.style.width = this.width + "px";
			this.visualElement.style.width = this.width + "px";
		}
		if(newHeight != this.height) {
			this.height = newHeight;
			this.drawView.application.height = this.height;
			this.drawView.application.canvas.style.height = this.height + "px";
			this.visualElement.style.height = this.height + "px";
		}
	}
};
var $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = "Date";
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
Perf.MEASUREMENT_INTERVAL = 1000;
Perf.FONT_FAMILY = "Helvetica,Arial";
Perf.FPS_BG_CLR = "#00FF00";
Perf.FPS_WARN_BG_CLR = "#FF8000";
Perf.FPS_PROB_BG_CLR = "#FF0000";
Perf.MS_BG_CLR = "#FFFF00";
Perf.MEM_BG_CLR = "#086A87";
Perf.INFO_BG_CLR = "#00FFFF";
Perf.FPS_TXT_CLR = "#000000";
Perf.MS_TXT_CLR = "#000000";
Perf.MEM_TXT_CLR = "#FFFFFF";
Perf.INFO_TXT_CLR = "#000000";
Perf.TOP_LEFT = "TL";
Perf.TOP_RIGHT = "TR";
Perf.BOTTOM_LEFT = "BL";
Perf.BOTTOM_RIGHT = "BR";
Perf.DELAY_TIME = 4000;
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
pixi_plugins_app_Application.AUTO = "auto";
pixi_plugins_app_Application.RECOMMENDED = "recommended";
pixi_plugins_app_Application.CANVAS = "canvas";
pixi_plugins_app_Application.WEBGL = "webgl";
pixi_plugins_app_Application.POSITION_STATIC = "static";
pixi_plugins_app_Application.POSITION_ABSOLUTE = "absolute";
pixi_plugins_app_Application.POSITION_FIXED = "fixed";
pixi_plugins_app_Application.POSITION_RELATIVE = "relative";
pixi_plugins_app_Application.POSITION_INITIAL = "initial";
pixi_plugins_app_Application.POSITION_INHERIT = "inherit";
vilog__$BlendMode_BlendMode_$Impl_$.Normal = 0;
vilog__$BlendMode_BlendMode_$Impl_$.Add = 1;
vilog__$BlendMode_BlendMode_$Impl_$.Multiply = 2;
vilog__$BlendMode_BlendMode_$Impl_$.Screen = 3;
vilog__$BlendMode_BlendMode_$Impl_$.Overlay = 4;
vilog__$BlendMode_BlendMode_$Impl_$.Darken = 5;
vilog__$BlendMode_BlendMode_$Impl_$.Lighten = 6;
vilog__$BlendMode_BlendMode_$Impl_$.ColorDodge = 7;
vilog__$BlendMode_BlendMode_$Impl_$.ColorBurn = 8;
vilog__$BlendMode_BlendMode_$Impl_$.HardLight = 9;
vilog__$BlendMode_BlendMode_$Impl_$.SoftLight = 10;
vilog__$BlendMode_BlendMode_$Impl_$.Difference = 11;
vilog__$BlendMode_BlendMode_$Impl_$.Exclusion = 12;
vilog__$BlendMode_BlendMode_$Impl_$.Hue = 13;
vilog__$BlendMode_BlendMode_$Impl_$.Saturation = 14;
vilog__$BlendMode_BlendMode_$Impl_$.Color = 15;
vilog__$BlendMode_BlendMode_$Impl_$.Luminosity = 16;
vilog__$TextureRequired_TextureRequired_$Impl_$.No = 0;
vilog__$TextureRequired_TextureRequired_$Impl_$.Yes = 1;
vilog__$TextureRequired_TextureRequired_$Impl_$.Unknown = 2;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.LineTo = 0;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.MoveTo = 1;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.QuaraticCurveTo = 2;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.BezierCurveTo = 3;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.Arc = 4;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.ArcTo = 5;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.Fill = 6;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.ClosePath = 7;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.DrawCircle = 8;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.DrawEllipse = 9;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.DrawRectangle = 10;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.DrawRoundRectagle = 11;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.DrawRegularPolygon = 12;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.DrawStar = 13;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.DrawGrid = 14;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.DrawColumns = 15;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.MultiplyTranform = 16;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.ResetTranform = 17;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.MultiplyAlpha = 18;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.ResetAlpha = 19;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.SetLineAlpha = 20;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.SetFillAlpha = 21;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.SetLineColor = 22;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.SetFillColor = 23;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.SetLineThickness = 24;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.SetBlendMode = 25;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.SetLineAlignment = 26;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.SetFonts = 27;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.SetFontSize = 28;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.SetFontStyle = 29;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.SetTextHolizontalAlign = 30;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.SetTextVerticalAlign = 31;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.DrawText = 32;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.SetImageHolizontalAlign = 33;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.SetImageVerticalAlign = 34;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.DrawImage = 35;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.StartMaskingRegion = 36;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.StartMaskedRegion = 37;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.EndMaskRegion = 38;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.ReferenceCommands_16_8 = 39;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.ReferenceCommands_24_16 = 40;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.ReferenceCommands_32_24 = 41;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.ArrowTo = 42;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.CurveArrowTo = 43;
vilog__$VilogCommandKind_VilogCommandKind_$Impl_$.ArcArrow = 44;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);

//# sourceMappingURL=visualizer.js.map